Resources:
  TemplatedSecret3D98B577:
    Type: AWS::SecretsManager::Secret
    Properties:
      GenerateSecretString:
        GenerateStringKey: password
        SecretStringTemplate: '{"username": "johndoe", "db-url": "whatever-url"}'
      Tags:
        - Key: project-name
          Value: Secrets-Manager
  TemplatedSecretRotationSchedule6FCD72E7:
    Type: AWS::SecretsManager::RotationSchedule
    Properties:
      SecretId:
        Ref: TemplatedSecret3D98B577
      RotationLambdaARN:
        Fn::GetAtt:
          - lambdarotatesecretBB259D99
          - Arn
      RotationRules:
        AutomaticallyAfterDays: 15
  TemplatedSecretPolicy049511AD:
    Type: AWS::SecretsManager::ResourcePolicy
    Properties:
      ResourcePolicy:
        Statement:
          - Action: secretsmanager:DeleteSecret
            Effect: Deny
            Principal:
              AWS:
                Fn::Join:
                  - ""
                  - - "arn:"
                    - Ref: AWS::Partition
                    - :iam::448855094770:root
            Resource: "*"
        Version: "2012-10-17"
      SecretId:
        Ref: TemplatedSecret3D98B577
  RolIdLambdaRotationB8655A25:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: "*"
            Version: "2012-10-17"
          PolicyName: "0"
      Tags:
        - Key: project-name
          Value: Secrets-Manager
  RolIdLambdaRotationDefaultPolicy748EE017:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - secretsmanager:DescribeSecret
              - secretsmanager:GetSecretValue
              - secretsmanager:PutSecretValue
              - secretsmanager:UpdateSecretVersionStage
            Effect: Allow
            Resource:
              Ref: TemplatedSecret3D98B577
          - Action: secretsmanager:GetRandomPassword
            Effect: Allow
            Resource: "*"
        Version: "2012-10-17"
      PolicyName: RolIdLambdaRotationDefaultPolicy748EE017
      Roles:
        - Ref: RolIdLambdaRotationB8655A25
  lambdarotatesecretBB259D99:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
        def lambda_handler(event, context):
          pass  
      Role:
        Fn::GetAtt:
          - RolIdLambdaRotationB8655A25
          - Arn
      Handler: lambda.lambda_handler
      Runtime: python3.8
      Tags:
        - Key: project-name
          Value: Secrets-Manager
      Timeout: 180
    DependsOn:
      - RolIdLambdaRotationDefaultPolicy748EE017
      - RolIdLambdaRotationB8655A25
  lambdarotatesecretInvokeServicePrincipalsecretsmanageramazonawscom9064B4F6:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
          - lambdarotatesecretBB259D99
          - Arn
      Principal: secretsmanager.amazonaws.com
